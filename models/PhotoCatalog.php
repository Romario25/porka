<?php

namespace app\models;

use Aws\S3\Exception\S3Exception;
use Aws\S3\S3Client;
use Exception;
use Imagine\Image\Box;
use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\imagine\Image;
use yii\web\UploadedFile;
use ZipArchive;

/**
 * This is the model class for table "photo_catalog".
 *
 * @property integer $id
 * @property string $title
 * @property integer $category_id
 * @property string $create_at
 * @property string $update_at
 * @property string $description
 * @property integer $plus
 * @property integer $minus
 * @property integer $hits
 * @property string $url
 * @property Category $category
 * @property Photos[] $photos
 * @property integer $storage
 */
class PhotoCatalog extends \yii\db\ActiveRecord
{

    /**
     * @var UploadedFile[]
     */
    public $photosUpload;

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'create_at',
                'updatedAtAttribute' => 'update_at',
                'value' => new Expression('NOW()'),
            ],

            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
                'slugAttribute' => 'url',
            ],
        ];
    }



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'photo_catalog';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'category_id', 'description', 'url', 'actor'], 'required'],
            [['category_id', 'plus', 'minus', 'hits', 'storage'], 'integer'],
            [['create_at', 'update_at'], 'safe'],
            [['description', 'actor', 'alt'], 'string'],
            //['photosUpload', 'file', 'skipOnEmpty' => ($this->isNewRecord)?false:true, 'extensions' => 'png, jpg', 'maxFiles' => 20],
            ['photosUpload', 'file', 'skipOnEmpty' => ($this->isNewRecord)?false:true, 'extensions' => 'zip'],
            [['title', 'meta_title', 'meta_keywords', 'meta_description'], 'string', 'max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'category_id' => 'Category ID',
            'create_at' => 'Create At',
            'update_at' => 'Update At',
            'description' => 'Description',
            'plus' => 'Plus',
            'minus' => 'Minus',
            'hits' => 'Hits',
            'storage' => 'Хранилище',
            'meta_title' => "Тайтл страницы",
            'meta_keywords' => 'Keywords',
            'meta_description' => 'Description'

        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(CategoryPhoto::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPhotos()
    {
        return $this->hasMany(Photos::className(), ['catalog_id' => 'id'])->select("url_thumbnail")->asArray()->column();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPhotosThumbnails()
    {
        return $this->hasMany(Photos::className(), ['catalog_id' => 'id'])->select("url_thumbnail")->asArray()->column();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPhotosCount()
    {
        return $this->hasMany(Photos::className(), ['catalog_id' => 'id'])->count("*");
    }

    public function afterSave($insert, $changedAttributes)
    {
        if($this->storage == 2){
            if($this->uploadAmazonPhotos()){
                parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
            }
        } else if($this->storage == 1){
            if($this->uploadPhotos()){
                parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
            }
        } else {
            if($this->uploadOnDaddyPhoto()){
                parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
            }
        }


    }

//    public function beforeSave($insert)
//    {
//
//        if($this->storage){
//            if($this->uploadAmazonPhotos()){
//                return parent::beforeSave($insert); // TODO: Change the autogenerated stub
//            }
//        } else {
////            if($this->uploadPhotos()){
////                parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
////            }
//            if($this->uploadOnDaddyPhoto()){
//                return parent::beforeSave($insert); // TODO: Change the autogenerated stub
//            }
//        }
//        //return parent::beforeSave($insert); // TODO: Change the autogenerated stub
//    }


    /**
     *
     * Метод загружает фото на амазон и сохраняет в бд путь до фото на амазоне
     *
     * @return bool
     */
    private function uploadAmazonPhotos(){
        $config = ArrayHelper::map(Config::find()->all(), 'name', 'value');

        $s3 = new S3Client([
            'version'     => 'latest',
            'region'      => 'us-west-2',
            'credentials' => [
                'key'    => $config['amazon_key'],
                'secret' => $config['amazon_secret']
            ]
        ]);
        try{

            // Разбираем архив
            //Создаём объект для работы с ZIP-архивами
            $zip = new ZipArchive();
            if ($this->photosUpload != null && $zip->open($this->photosUpload->tempName) === true) {
                $zip->extractTo("../web/uploads/temp"); //Извлекаем файлы в указанную директорию
                $count = $zip->numFiles;
                for ($i = 0; $i < $count; $i++)
                {
                    $stat = $zip->statIndex ($i);
                    echo $stat['name'], "\n";
                    $nameFile = time() . '_'.$stat['name'];

                    // сохраняем превьюшки
                    // Сохраняем оригинал фотки в temp папку

                    Image::getImagine()->open("../web/uploads/temp/".$stat['name'])->flipHorizontally()->save("../web/uploads/temp/".$nameFile);

                    // Вешаем ваатермарку
                    $size = getimagesize("../web/uploads/temp/".$nameFile);
                    Image::watermark('../web/uploads/temp/'.$nameFile, "../web/uploads/watermark/LogoForNewPhoto.png", [$size[0] - 218, 0])
                        ->save('../web/uploads/temp/'.$nameFile);

                    // сохраняем превьюшки
                    Image::thumbnail('../web/uploads/temp/'.$nameFile, 255, 340)
                        ->save('../web/uploads/thumbnail/'.$nameFile, ['quality' => 80]);

                    unlink("../web/uploads/temp/".$stat['name']);

                    $res = $s3->putObject([
                        'Bucket' => $config['amazon_bucket'],
                        'Key' => 'photo/'.$nameFile,
                        'Body' => fopen("../web/uploads/temp/".$nameFile, 'rb'),
                        'ACL' => 'public-read'
                    ]);
                    $photos = new Photos();
                    $photos->url = $res['ObjectURL'];
                    $photos->catalog_id = $this->id;
                    $photos->url_thumbnail = '/uploads/thumbnail/'.$nameFile;
                    $photos->save();
                    unlink("../web/uploads/temp/".$nameFile);

                }
                $zip->close(); //Завершаем работу с архивом
            }

        } catch(S3Exception $e){
            echo $e->getMessage();
            Yii::$app->session->setFlash('error', $e->getMessage());
        }

        return true;
    }

    /**
     *
     * Метод загружает фото на сервер
     *
     * @return bool
     */
    private function uploadPhotos(){



        try{

            // Разбираем архив
            //Создаём объект для работы с ZIP-архивами
            $zip = new ZipArchive();
            if ($this->photosUpload != null && $zip->open($this->photosUpload->tempName) === true) {
                $zip->extractTo("../web/uploads/temp"); //Извлекаем файлы в указанную директорию
                $count = $zip->numFiles;
                for ($i = 0; $i < $count; $i++)
                {
                    $stat = $zip->statIndex ($i);
                    echo $stat['name'], "\n";
                    $nameFile = time() . '_'.$stat['name'];

                    // сохраняем превьюшки
                    // Сохраняем оригинал фотки в temp папку

                    Image::getImagine()->open("../web/uploads/temp/".$stat['name'])->flipHorizontally()->save("../web/uploads/temp/".$nameFile);

                    // Вешаем ваатермарку
                    $size = getimagesize("../web/uploads/temp/".$nameFile);
                    Image::watermark('../web/uploads/temp/'.$nameFile, "../web/uploads/watermark/LogoForNewPhoto.png", [$size[0] - 218, 0])
                        ->save('../web/uploads/temp/'.$nameFile);

                    // сохраняем превьюшки
                    Image::thumbnail('../web/uploads/temp/'.$nameFile, 255, 340)
                        ->save('../web/uploads/thumbnail/'.$nameFile, ['quality' => 80]);

                    unlink("../web/uploads/temp/".$stat['name']);

                    Image::getImagine()->open("../web/uploads/temp/".$nameFile)->save("../web/uploads/photos/".$nameFile);

                    $photos = new Photos();
                    $photos->url = "/uploads/photos/".$nameFile;
                    $photos->catalog_id = $this->id;
                    $photos->url_thumbnail = '/uploads/thumbnail/'.$nameFile;
                    $photos->save();
                    unlink("../web/uploads/temp/".$nameFile);

                }
                $zip->close(); //Завершаем работу с архивом
            }

        } catch(S3Exception $e){
            echo $e->getMessage();
            Yii::$app->session->setFlash('error', $e->getMessage());
        }

        return true;
    }

    /**
     * Метод загружает фото на удаленный сервер на GoDaddy
     *
     * @return bool
     */
    public function uploadOnDaddyPhoto(){

        try{

            // Разбираем архив
            //Создаём объект для работы с ZIP-архивами
            $zip = new ZipArchive();

            if ($this->photosUpload != null && $zip->open($this->photosUpload->tempName) === true) {
                $zip->extractTo("../web/uploads/temp"); //Извлекаем файлы в указанную директорию

                $count = $zip->numFiles;

                for ($i = 0; $i < $count; $i++)
                {
                    $stat = $zip->statIndex ($i);
                  //  echo $stat['name'], "\n";
                    $nameFile = time() . '_'.$stat['name'];

                    // сохраняем превьюшки
                    // Сохраняем оригинал фотки в temp папку

                    Image::getImagine()->open("../web/uploads/temp/".$stat['name'])->flipHorizontally()->save("../web/uploads/temp/".$nameFile);

                    // Вешаем ваатермарку
                    $size = getimagesize("../web/uploads/temp/".$nameFile);
                    Image::watermark('../web/uploads/temp/'.$nameFile, "../web/uploads/watermark/LogoForNewPhoto.png", [$size[0] - 218, 0])
                        ->save('../web/uploads/temp/'.$nameFile);

                    $this->ftpUpload('../web/uploads/temp/'.$nameFile, 'photos', $nameFile);
                  // echo "START".$count; die();
                    // сохраняем превьюшки
                    Image::thumbnail('../web/uploads/temp/'.$nameFile, 255, 340)
                        ->save('../web/uploads/temp/'.$nameFile, ['quality' => 80]);
                    //$preview = Image::thumbnail('../web/uploads/temp/'.$nameFile, 255, 340);
//                    echo "START".$count; die();


                    $this->ftpUpload('../web/uploads/temp/'.$nameFile, 'thumbnail', $nameFile);



//                    Image::getImagine()->open("../web/uploads/temp/".$nameFile)->save("../web/uploads/photos/".$nameFile);

                    $photos = new Photos();
                    $photos->url = "http://loveporno.net/uploads/photos/".$nameFile;
                    $photos->catalog_id = $this->id;
                    $photos->url_thumbnail = 'http://loveporno.net/uploads/thumbnail/'.$nameFile;
                    $photos->save();
                    unlink("../web/uploads/temp/".$nameFile);

                }
                $zip->close(); //Завершаем работу с архивом
            }

        } catch(Exception $e){
            echo $e->getMessage();
            Yii::$app->session->setFlash('error', $e->getMessage());
        }

        return true;
    }

    /**
     * Отправка файла на удаленный сервер , используя file_get_contents
     *
     * @param $filePath - путь до файла, котоырый надо отправить
     * @param $folder - папка на удаленной сервере
     * @param $nameFile - название файла
     * @throws Exception
     */
    private function sendDaddy($filePath, $folder, $nameFile){
        $post = http_build_query(
            array(
                'path'=> 'uploads/'.$folder, //параметр определяющий путь на втором сервере
                'nameFile' => $nameFile,
                'img' => base64_encode(file_get_contents($filePath)) //где file_test.zip это отпровляемый файл
            )
        );

        //опции контекста
        $options = array('http' =>
            array(
                'method'  => 'POST',
                'header'  => 'Content-type: application/x-www-form-urlencoded',
                'content' => $post
            )
        );

        //отправляем файл на второй сервер и получаем его ответ
        $context = stream_context_create($options);
        $result = file_get_contents('http://loveporno.net/accept.php', false, $context);

        if ($result == '200')
        {
           // unlink($filePath);
        } else {
            throw new Exception("Ошибка загрузки на сервер ".$result);
        }
    }

    /**
     * Отправка файла на удаленный сервер , используя curl
     *
     * @param $filePath - путь до файла, котоырый надо отправить
     * @param $folder - папка на удаленной сервере
     * @param $nameFile - название файла
     * @throws Exception
     */
    private function sendFileCurl($filePath, $folder, $nameFile){
        $ch = curl_init();

        $data = array(
            'path'=> 'uploads/'.$folder, //параметр определяющий путь на втором сервере
            'nameFile' => $nameFile,
            'img' => base64_encode(file_get_contents($filePath))
        );

//        curl_setopt($ch, CURLOPT_URL, 'http://loveporno.net/accept.php');
//        curl_setopt($ch, CURLOPT_POST, 1);
//        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
//
//        curl_exec($ch);


        // сообщаем куда будет отправлять
        curl_setopt($ch, CURLOPT_URL, 'http://loveporno.net/accept.php');

        // файлы и данные будет отправлены
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

        // передаем true или 1 если хотим ждать ответа после запроса
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        // включим отладочную информацию
        curl_setopt($ch, CURLOPT_VERBOSE, true);

        // отсылаем запрос
        $response = curl_exec($ch);

        // отладка: посмотрим на ответ сервера
        echo $response;

    }

    /**
     * Отправка файла на удаленный сервер , используя ftp
     *
     * @param $filePath - путь до файла, котоырый надо отправить
     * @param $folder - папка на удаленной сервере
     * @param $nameFile - название файла
     * @throws Exception
     */
    private function ftpUpload($filePath, $folder, $nameFile){

        $ftp_server = "ftp.loveporno.net";
        $ftp_user_name = "ataman@loveporno.net";
        $ftp_user_pass = "ko6Shehah";
        $destination_file = "loveporno.net/web/uploads/".$folder.'/'.$nameFile;
        $source_file = $filePath;


        // установка соединения
        $conn_id = ftp_connect($ftp_server);

        // вход с именем пользователя и паролем
        $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

        // проверка соединения
        if ((!$conn_id) || (!$login_result)) {
            echo "Не удалось установить соединение с FTP сервером!";
            echo "Попытка подключения к серверу $ftp_server под именем $ftp_user_name!";
            exit;
        } else {
          //  echo "Установлено соединение с FTP сервером $ftp_server под именем $ftp_user_name";
        }

        // закачивание файла
        $upload = ftp_put($conn_id, $destination_file, $source_file, FTP_BINARY);

        // проверка результата
        if (!$upload) {
            echo "Не удалось закачать файл!";
        } else {
          //  echo "Файл $source_file закачен на $ftp_server под именем $destination_file";
        }

        // закрытие соединения
        ftp_close($conn_id);

    }

    public function beforeDelete()
    {
        $photos = Photos::find()->where([
            'catalog_id' => $this->id
        ])->all();

        foreach($photos as $photo){
            if(file_exists("../web".$photo->url_thumbnail)){
                unlink("../web".$photo->url_thumbnail);
            }

            $config = ArrayHelper::map(Config::find()->all(), 'name', 'value');

            $s3 = new S3Client([
                'version'     => 'latest',
                'region'      => 'us-west-2',
                'credentials' => [
                    'key'    => $config['amazon_key'],
                    'secret' => $config['amazon_secret']
                ]
            ]);
            try{

                $res = $s3->deleteObject([
                    'Bucket' => $config['amazon_bucket'],
                    'Key' => 'photo/'.urldecode(mb_substr ($photo->url,  mb_strrpos($photo->url, '/')+1)),
                ]);

            } catch(S3Exception $e){
                echo $e->getMessage();
                Yii::$app->session->setFlash('error', $e->getMessage());
            }
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


//    public function afterDelete()
//    {
//        // Получим фотки
//        $photos = Photos::find()->where([
//            'catalog_id' => $this->id
//        ])->all();
//print_r($photos);
//        foreach($photos as $photo){
//            unlink("../web".$photo->url_thumbnails);
//            $config = ArrayHelper::map(Config::find()->all(), 'name', 'value');
//
//            $s3 = new S3Client([
//                'version'     => 'latest',
//                'region'      => 'us-west-2',
//                'credentials' => [
//                    'key'    => $config['amazon_key'],
//                    'secret' => $config['amazon_secret']
//                ]
//            ]);
//            try{
//                $res = $s3->putObject([
//                    'Bucket' => $config['amazon_bucket'],
//                    'Key' => 'video/'.time() . '.' . $this->videoFile->extension,
//                    'Body' => fopen($this->videoFile->tempName, 'rb'),
//                    'ACL' => 'public-read'
//                ]);
//
//                $res = $s3->deleteObject([
//                    'Bucket' => $config['amazon_bucket'],
//                    'Key' => 'video/'.mb_substr ($photo->url, 0, mb_strrpos($photo->url, '/')),
//                ]);
//
//            } catch(S3Exception $e){
//                echo $e->getMessage();
//                Yii::$app->session->setFlash('error', $e->getMessage());
//            }
//        }
//        die();
//        parent::afterDelete(); // TODO: Change the autogenerated stub
//    }
}
