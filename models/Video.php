<?php

namespace app\models;

use app\components\MyHelper;
use Aws\S3\Exception\S3Exception;
use Aws\S3\S3Client;
use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "video".
 *
 * @property integer $id
 * @property string $create_at
 * @property string $update_at
 * @property string $title
 * @property string $description
 * @property string $object_url
 * @property string $preview_url
 * @property integer $category_id
 * @property string $url
 * @property string $duration
 * @property string $actor
 *
 * @property Category $category
 */
class Video extends \yii\db\ActiveRecord
{




    /**
     * @var UploadedFile
     */
    public $videoFile;

    /**
     * @var UploadedFile[]
     */
    public $screenFiles;



    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'create_at',
                'updatedAtAttribute' => 'update_at',
                'value' => new Expression('NOW()'),
            ],

            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
                'slugAttribute' => 'url',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'video';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'category_id', 'url', 'duration', 'actor'], 'required'],
            [['create_at', 'update_at'], 'safe'],
            [['description', 'url'], 'string'],
            [['category_id'], 'integer'],
            ['videoFile', 'file', 'skipOnEmpty' => ($this->isNewRecord)?false:true],
            ['screenFiles', 'file', 'skipOnEmpty' => ($this->isNewRecord)?false:true, 'extensions' => 'png, jpg', 'maxFiles' => 4],
            [['title', 'object_url', 'preview_url'], 'string', 'max' => 255]
        ];
    }

    public function beforeSave($insert)
    {
        if($this->uploadAmazon()){
            return parent::beforeSave($insert); // TODO: Change the autogenerated stub
        }
        //return parent::beforeSave($insert); // TODO: Change the autogenerated stub

    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->uploadScrrenVideo($this->id);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }


    /**
     *
     * Сохранение видеофайла на амазоне
     *
     * @return bool
     */
    private function uploadAmazon(){

        $config = ArrayHelper::map(Config::find()->all(), 'name', 'value');
        $arr = [
            0 => ['w'=> 320, 'h'=> 240],
            1 => ['w'=> 640, 'h'=> 480],
            2 => ['w'=> 1280, 'h'=> 720],
        ];

        $fileName = time() . '.' . $this->videoFile->extension;
        $s3 = new S3Client([
            'version'     => 'latest',
            'region'      => 'us-west-2',
            'credentials' => [
                'key'    => $config['amazon_key'],
                'secret' => $config['amazon_secret']
            ]
        ]);

        foreach($arr as $item){
            MyHelper::runExternal( "ffmpeg -i {$this->videoFile->tempName}  -s {$item['w']}x{$item['h']}  -y ".__DIR__."/../web/uploads/temp/{$item['w']}_{$item['h']}_$fileName");
            try{
                $res = $s3->putObject([
                    'Bucket' => $config['amazon_bucket'],
                    'Key' => "video/{$item['w']}_{$item['h']}_$fileName",
                    'Body' => fopen(__DIR__."/../web/uploads/temp/{$item['w']}_{$item['h']}_".$fileName, 'rb'),
                    'ACL' => 'public-read'
                ]);

                $this->object_url = $fileName;
            } catch(S3Exception $e){
                echo $e->getMessage();
                Yii::$app->session->setFlash('error', $e->getMessage());
            }
            unlink(__DIR__."/../web/uploads/temp/{$item['w']}_{$item['h']}_$fileName");

        }

//        MyHelper::runExternal( "ffmpeg -i {$this->videoFile->tempName}  -s 640x480  -y ".__DIR__."/../web/uploads/temp/640_480_$fileNmae");
//        MyHelper::runExternal( "ffmpeg -i {$this->videoFile->tempName}  -s 720x1280  -y ".__DIR__."/../web/uploads/temp/1280_720_$fileNmae");




        return true;
    }

    private function uploadScrrenVideo($video_id){


        foreach($this->screenFiles as $file){

            $nameFile = time() . '_'.$file->baseName.'.' . $file->extension;

            if($file->saveAs("../web/uploads/screenvideo/".$nameFile)){
                // сохранение в бд url до скрина на облаке
                $videoScreen = new VideoScreens();
                $videoScreen->video_id = $video_id;
                $videoScreen->screen_url = "/uploads/screenvideo/".$nameFile;
                $videoScreen->save();
            }
        }

        return true;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'create_at' => 'Create At',
            'update_at' => 'Update At',
            'title' => 'Title',
            'description' => 'Description',
            'object_url' => 'Object Url',
            'preview_url' => 'Preview Url',
            'category_id' => 'Category ID',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getScreens()
    {
        return $this->hasMany(VideoScreens::className(), ['video_id' => 'id'])->select('screen_url')->asArray()->column();
    }

    public function beforeDelete()
    {
        $photos = VideoScreens::find()->where([
            'video_id' => $this->id
        ])->all();

        foreach($photos as $photo){
            //echo "../web".$photo->screen_url."<br />";
            if(file_exists("../web".$photo->screen_url)){
                unlink("../web".$photo->screen_url);
            }
        }
        $config = ArrayHelper::map(Config::find()->all(), 'name', 'value');
        //echo 'video/'.urldecode(mb_substr ($this->object_url,  mb_strrpos($this->object_url, '/')+1));
        $s3 = new S3Client([
            'version'     => 'latest',
            'region'      => 'us-west-2',
            'credentials' => [
                'key'    => $config['amazon_key'],
                'secret' => $config['amazon_secret']
            ]
        ]);
        try{

            $res = $s3->deleteObject([
                'Bucket' => $config['amazon_bucket'],
                'Key' => 'video/'.urldecode(mb_substr ($this->object_url,  mb_strrpos($this->object_url, '/')+1)),
            ]);

        } catch(S3Exception $e){
            echo $e->getMessage();
            Yii::$app->session->setFlash('error', $e->getMessage());
        }
        //die();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public static function getVideoUrl($w, $h, $url){
        $config = ArrayHelper::map(Config::find()->all(), 'name', 'value');

        $url = "https://s3-us-west-2.amazonaws.com/".$config['amazon_bucket']."/video/".$w."_".$h."_".$url;

        return $url;
    }
}
